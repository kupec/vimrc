priority -100

############
#  COMMON  #
############

# The smart snippets use a global options called
# "g:ultisnips_javascript.{option}" which can control the format
# of trailing semicolon, space before function paren, etc.
#
# e.g.
# let g:ultisnips_javascript = {
#      \ 'keyword-spacing': 'always',
#      \ 'semi': 'never',
#      \ 'space-before-function-paren': 'always',
#      \ }


global !p
from javascript_snippets import (
	semi, space_before_function_paren, keyword_spacing
)

def base_file_name():
    snip.rv = snip.basename.split('.')[0];
endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################

snippet ptc ""
`!p base_file_name()`.propTypes = {
    ${1}
};
endsnippet

snippet irp ""
import PropTypes from 'prop-types'
endsnippet

snippet ptb ""
PropTypes.bool,
endsnippet

snippet ptf ""
PropTypes.func,
endsnippet

snippet ptrf ""
PropTypes.func.isRequired,
endsnippet

snippet ptfr ""
PropTypes.func.isRequired,
endsnippet

snippet pto ""
PropTypes.object,
endsnippet

snippet ptro ""
PropTypes.object.isRequired,
endsnippet

snippet ptor ""
PropTypes.object.isRequired,
endsnippet

snippet pta ""
PropTypes.array,
endsnippet

snippet ptra ""
PropTypes.array.isRequired,
endsnippet

snippet ptar ""
PropTypes.array.isRequired,
endsnippet

snippet pts ""
PropTypes.string,
endsnippet

snippet ptrs ""
PropTypes.string.isRequired,
endsnippet

snippet ptsr ""
PropTypes.string.isRequired,
endsnippet

snippet ptn ""
PropTypes.number,
endsnippet

snippet ptrn ""
PropTypes.number.isRequired,
endsnippet

snippet ptnr ""
PropTypes.number.isRequired,
endsnippet


snippet mss ""
import {makeStyles} from '@material-ui/core/styles';

const useStyles = makeStyles(() => ({
    root: {
    },
}));
endsnippet


snippet iscss ""
import styles from './${1}`!p base_file_name()`.module.scss';
endsnippet


snippet msflex ""
display: 'flex',
flexFlow: 'column',
justifyContent: 'center',
alignItems: 'center',
endsnippet

snippet msabs ""
position: 'absolute',
left: 0,
top: 0,
width: '100%',
height: '100%',
endsnippet



snippet tsrc ""
import React from 'react';
import styles from './`!p base_file_name()`.module.scss';
import classNames from 'classnames';

interface `!p base_file_name()`Props {

}

const `!p base_file_name()` = ({}: `!p base_file_name()`Props) => {
    return null;
};

export default `!p base_file_name()`;
endsnippet

snippet jsrc ""
import React from 'react';
import PropTypes from 'prop-types';
import {makeStyles} from '@material-ui/core/styles';

const useStyles = makeStyles(() => ({
    root: {
    },
}));

export default function `!p base_file_name()`(props) {
	const classes = useStyles(props);

    return (
		<div></div>
	);
}

`!p base_file_name()`.propTypes = {
};

endsnippet

snippet jsrctest ""
import React from 'react';
import `!p base_file_name()` from './`!p base_file_name()`';
import {render, act, fireEvent} from '@testing-library/react';

function render`!p base_file_name()`({}) {
    const renderResult = render(<`!p base_file_name()` />);

	return {
		...renderResult,
	};
}

describe('`!p base_file_name()` - render', () => {
    test('${1}', () => {
        const {} = render`!p base_file_name()`({});
        ${2}
    });
});
endsnippet

snippet jsrcreduxtest ""
import React from 'react';
import `!p base_file_name()` from './`!p base_file_name()`';
import {act, fireEvent} from '@testing-library/react';
import renderWithRedux from '../../testing/renderWithRedux';
import {
    createMockApiResponse,
    addMockApiResponse,
    listApiResponse,
    apiResponse,
    apiResponseProcessing,
} from '../../testing/mock/makeRequest';
import makeRequest from '../../sources/backend/makeRequest';
import matchURL from '../../testing/expect/matchURL';

jest.mock('../../sources/backend/makeRequest');

const FETCH_LIST_REQUEST = {
    path: '/___/?limit=10',
    method: 'GET',
};

function render`!p base_file_name()`() {
    const renderResult = renderWithRedux(<`!p base_file_name()` />, {}, {withSaga: true});

    const spinner = renderResult.queryByRole('progressbar');

    return {
        ...renderResult,
        spinner,
    };
}

describe('`!p base_file_name()` - render', () => {
    beforeEach(() => {
        createMockApiResponse(FETCH_LIST_REQUEST, listApiResponse([]));
    });

    test('loading', () => {
        createMockApiResponse(FETCH_LIST_REQUEST, apiResponseProcessing());

        const {spinner} = render`!p base_file_name()`();

        expect(spinner).toBeInTheDocument();
    });
});
endsnippet

snippet jsdesc ""
describe('`!p base_file_name()` - ${1}', () => {
	test('', () => {
        ${2}
	});
});
endsnippet

snippet jstest ""
test('${2}', () => {
    ${1}
});
endsnippet


snippet printdom ""
const {prettyDOM} = require('@testing-library/dom');
console.log(prettyDOM(document.body, 1e10));
endsnippet

# vim:ft=snippets:
