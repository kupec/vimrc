set nocompatible
set expandtab
set tabstop=4
set shiftwidth=4
set number
set cursorline
set hlsearch
set t_Co=256
set autoread
set splitright
set splitbelow
set lazyredraw
syntax enable

let g:netrw_browsex_viewer="setsid xdg-open"

let mapleader=","

call plug#begin('~/.vim/plugged')

" sudo
Plug 'lambdalisue/suda.vim'

" format
Plug 'editorconfig/editorconfig-vim'
Plug 'prettier/vim-prettier'
Plug 'frazrepo/vim-rainbow'
" format js
Plug 'pangloss/vim-javascript'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'leafgarland/typescript-vim'
Plug 'ianks/vim-tsx'
" format go
Plug 'fatih/vim-go'
" format python
Plug 'vim-python/python-syntax'

" movement
Plug 'easymotion/vim-easymotion'
" editing
Plug 'mattn/emmet-vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-abolish'
Plug 'arthurxavierx/vim-caser'
Plug 'heavenshell/vim-jsdoc', { 
  \ 'for': ['javascript', 'javascript.jsx','typescript'], 
  \ 'do': 'make install'
\}
" autocomplete
Plug 'wellle/tmux-complete.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" search
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'mileszs/ack.vim'
" file manager
Plug 'scrooloose/nerdtree'
Plug 'kyazdani42/nvim-web-devicons' " for file icons
Plug 'kyazdani42/nvim-tree.lua'
" markdown preview
" [install]: npm i -g livedown
" [help]: :Livedown*
Plug 'shime/vim-livedown'
" git plugin
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
" linter
" [help]: :ALEToggle
Plug 'w0rp/ale'
" color scheme
Plug 'NLKNguyen/papercolor-theme'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" highlight
Plug 'lfv89/vim-interestingwords'
" windows
Plug 'wesQ3/vim-windowswap'
" snippets
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
" terminal
Plug 'kassio/neoterm'

call plug#end()

let g:suda#prefix = ['suda://', 'sudo://']

let g:ackprg = 'rg --vimgrep --fixed-strings'

function! s:is_ubuntu()
    return trim(system('which apt-get >/dev/null && echo 1')) == '1'
endfunction

if s:is_ubuntu()
    let g:fd_prog = 'fdfind'
else
    let g:fd_prog = 'fd'
endif


let fzf_command_args = '--type file --hidden --exclude .git --exclude node_modules'
let $FZF_DEFAULT_COMMAND = g:fd_prog . ' --type file --hidden --exclude .git --exclude node_modules'

let g:user_emmet_settings = {
  \  'javascript.jsx' : {
    \      'extends' : 'jsx',
    \  },
  \}

let g:ale_linters = {
\   'javascript': ['eslint'],
\   'python': ['flake8'],
\}
let g:ale_fixers = {
\   'javascript': ['eslint'],
\   'python': ['autopep8'],
\}
let g:ale_fix_on_save = 0

let g:windowswap_map_keys = 0

let g:airline_theme='papercolor'

let g:rainbow_active = 1

let g:python_highlight_all = 1

let g:prettier#exec_cmd_path = 0
if prettier#PrettierCli('--version') < '2.0'
  let g:prettier#config#arrow_parens = 'avoid'
endif
let g:prettier#exec_cmd_async = 1
let g:prettier#quickfix_auto_focus = 0
autocmd FileType python nnoremap <buffer> <leader>p :ALEFix<CR>

let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsEditSplit="vertical"

set background=light
autocmd VimEnter * colorscheme PaperColor

function! s:open_project(path)
   execute "tcd " . a:path
   new
   setlocal nonumber

   for i in range(winheight('.') / 2 - 1)
       call append(0, '')
   endfor

   call append(line('$'), ["Project: " . a:path, "Please open a file"])
   execute "$-1,$center" winwidth('.')
   set nomodified

   execute "normal \<C-W>o"
endfunction

function! s:open_project_in_new_tab(path)
   let pwd = getcwd()
   execute "tcd " . pwd

   execute "tabnew"

   call s:open_project(a:path)
endfunction

" global
noremap <c-c> <esc>
inoremap <c-c> <esc>
noremap <esc> <c-c>
inoremap <esc> <c-c>

" search
nnoremap <leader>/ :noh<CR>

" console
tnoremap <C-J> <C-\><C-N>

" motion 
nmap <leader>m <Plug>(easymotion-overwin-f2)

" windows
nnoremap <silent> <leader>ww :call WindowSwap#EasyWindowSwap()<CR>

" vimrc

function! s:vimrc_commit_and_push()
    Git add --all
    autocmd BufDelete .git/COMMIT_EDITMSG ++once execute "Gpush | echom 'pushed!'"
    Gcommit
endfunction

nnoremap <silent> <leader>rcl :so $MYVIMRC<CR>
nnoremap <silent> <leader>rco :call <SID>open_project_in_new_tab("~/.vim")<CR>:e ~/.vim/neovimrc<CR>
nnoremap <silent> <leader>rcg :call <SID>vimrc_commit_and_push()<CR>

" todo
command! TODO :tabnew ~/proj/TODO

" fzf
nnoremap <CR><CR> :FZF<CR>
nnoremap <CR><tab> :FZF -q <C-R><C-W><CR>
vnoremap <CR><tab> "wy:FZF -q <C-R>w<CR>
nnoremap <CR><space> :GFiles<CR>
nnoremap <space><CR> :Buffers<CR>
nnoremap <space><space> :Ack!<space>""<Left>
nnoremap <space><tab> :Ack! "<C-R><C-W>"<CR>
vnoremap <space><tab> "wy:Ack! "<C-R>w"<CR>
nnoremap <space><leader><space> :Rg<CR>
nnoremap <space><leader><tab> :Rg \b<C-R><C-W>\b<CR>
vnoremap <space><leader><tab> "wy:Rg <C-R>w<CR>
nnoremap <space>/ :Lines<CR>

imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-l> <plug>(fzf-complete-line)

" nerdtree
"nnoremap <leader>nE :NERDTree<CR>
"nnoremap <leader>ne :NERDTreeFocus<CR>
"nnoremap <leader>nf :NERDTreeFind<CR>
"nnoremap <leader>nc :NERDTreeClose<CR>

" nvim-tree
" let g:nvim_tree_ignore = [ '.git', 'node_modules', '.cache' ] "empty by default
let g:nvim_tree_gitignore = 1 "0 by default
let g:nvim_tree_quit_on_open = 1 "0 by default, closes the tree when you open a file
let g:nvim_tree_indent_markers = 1 "0 by default, this option shows indent markers when folders are open
let g:nvim_tree_hide_dotfiles = 1 "0 by default, this option hides files and folders starting with a dot `.`
let g:nvim_tree_git_hl = 1 "0 by default, will enable file highlight for git attributes (can be used without the icons).
let g:nvim_tree_highlight_opened_files = 1 "0 by default, will enable folder and file icon highlight for opened files/directories.
let g:nvim_tree_root_folder_modifier = ':~' "This is the default. See :help filename-modifiers for more options
let g:nvim_tree_add_trailing = 1 "0 by default, append a trailing slash to folder names
let g:nvim_tree_group_empty = 1 " 0 by default, compact folders that only contain a single folder into one node in the file tree
let g:nvim_tree_disable_window_picker = 1 "0 by default, will disable the window picker.
let g:nvim_tree_icon_padding = ' ' "one space by default, used for rendering the space between the icon and the filename. Use with caution, it could break rendering if you set an empty string depending on your font.
let g:nvim_tree_symlink_arrow = ' >> ' " defaults to ' ‚ûõ '. used as a separator between symlinks' source and target.
let g:nvim_tree_respect_buf_cwd = 1 "0 by default, will change cwd of nvim-tree to that of new buffer's when opening nvim-tree.
let g:nvim_tree_create_in_closed_folder = 0 "1 by default, When creating files, sets the path of a file when cursor is on a closed folder to the parent folder when 0, and inside the folder when 1.
let g:nvim_tree_refresh_wait = 500 "1000 by default, control how often the tree can be refreshed, 1000 means the tree can be refresh once per 1000ms.
let g:nvim_tree_window_picker_exclude = {
    \   'filetype': [
    \     'notify',
    \     'packer',
    \     'qf'
    \   ],
    \   'buftype': [
    \     'terminal'
    \   ]
    \ }
" Dictionary of buffer option names mapped to a list of option values that
" indicates to the window picker that the buffer's window should not be
" selectable.
let g:nvim_tree_special_files = { 'README.md': 1, 'Makefile': 1, 'MAKEFILE': 1 } " List of filenames that gets highlighted with NvimTreeSpecialFile
let g:nvim_tree_show_icons = {
    \ 'git': 1,
    \ 'folders': 0,
    \ 'files': 0,
    \ 'folder_arrows': 0,
    \ }
"If 0, do not show the icons for one of 'git' 'folder' and 'files'
"1 by default, notice that if 'files' is 1, it will only display
"if nvim-web-devicons is installed and on your runtimepath.
"if folder is 1, you can also tell folder_arrows 1 to show small arrows next to the folder icons.
"but this will not work when you set indent_markers (because of UI conflict)

" default will show icon by default if no icon is provided
" default shows no icon by default
let g:nvim_tree_icons = {
    \ 'default': 'Óòí',
    \ 'symlink': 'ÔíÅ',
    \ 'git': {
    \   'unstaged': "‚úó",
    \   'staged': "‚úì",
    \   'unmerged': "Óúß",
    \   'renamed': "‚ûú",
    \   'untracked': "‚òÖ",
    \   'deleted': "Ôëò",
    \   'ignored': "‚óå"
    \   },
    \ 'folder': {
    \   'arrow_open': "Ôëº",
    \   'arrow_closed': "Ôë†",
    \   'default': "Óóø",
    \   'open': "Óóæ",
    \   'empty': "ÔÑî",
    \   'empty_open': "ÔÑï",
    \   'symlink': "ÔíÇ",
    \   'symlink_open': "Óóæ",
    \   },
    \   'lsp': {
    \     'hint': "ÔÅ™",
    \     'info': "ÔÅö",
    \     'warning': "ÔÅ±",
    \     'error': "ÔÅó",
    \   }
    \ }

set termguicolors " this variable must be enabled for colors to be applied properly

" a list of groups can be found at `:help nvim_tree_highlight`
highlight NvimTreeFolderIcon guibg=blue
lua << EOF
require'nvim-tree'.setup()
EOF
nnoremap <leader>ne :NvimTreeToggle<CR>
nnoremap <leader>nf :NvimTreeFindFile<CR>
nnoremap <leader>nc :NvimTreeToggle<CR>

" navigation
runtime conf/qp_js_import.vim
runtime conf/qp_file_lines_view.vim
runtime conf/qp_js_file_lines_view.vim
runtime conf/qp_python_file_lines_view.vim

" temp
nmap <F5> viwgscaAction<esc>b~
let @e = '0i[A],j0'
let @w = ':s/|/,/ggv:s/[${}]//ggv`<0gv@e'

" tests

nnoremap <leader>to :Tnew<CR>
nnoremap <leader>tr :Tclear<CR>
nnoremap <leader>tt :Ttoggle<CR>

" ALE
nnoremap ]l :ALENext<CR>
nnoremap [l :ALEPrevious<CR>
nnoremap <leader>ll :ALEHover<CR>
nnoremap <leader>ld :ALEDetail<CR><C-W>J

" coc
inoremap <silent><expr> <c-space> coc#refresh()
noremap <silent> <leader>R :CocAction<cr>

" emmet

nmap <leader>cts va"<esc>`<BcwclassName<esc>f"lcs"{lsstyles.<esc>WX

" fast home/end
inoremap II <esc>I
inoremap AA <esc>A
nnoremap 0 ^

" paste current filename
inoremap <C-\><C-f><C-n> <C-R>=expand("%:t:r")<CR>

" find on internet
nnoremap <silent> <leader>dg :execute "!" g:netrw_browsex_viewer "'https://www.google.com/search?q=<C-R><C-W>'"<CR>
nnoremap <silent> <leader>dm :execute "!" g:netrw_browsex_viewer "'https://developer.mozilla.org/en-US/search?q=<C-R><C-W>'"<CR>
nnoremap <silent> <leader>dn :execute "!" g:netrw_browsex_viewer "'https://www.npmjs.com/package/<C-R><C-W>'"<CR>
autocmd FileType python noremap <silent> <leader>dp :execute "!" g:netrw_browsex_viewer "'https://docs.python.org/3/search.html?check_keywords=yes&area=default&q=<C-R><C-W>'"<CR>
autocmd FileType python noremap <silent> <leader>dy :execute "!" g:netrw_browsex_viewer "'https://pypi.org/search/?q=<C-R><C-W>'"<CR>

" add empty lines
nnoremap <F2> m`o<esc>``
nnoremap <F3> m`O<esc>``
nnoremap <F4> m`O<esc>``m`o<esc>``

inoremap <F2> <esc>m`o<esc>``a
inoremap <F3> <esc>m`O<esc>``a

" remove near lines
nnoremap <C-F2> m`jdd``
nnoremap <C-F3> m`kdd``
nnoremap <C-F4> m`kdd``m`jdd``

inoremap <C-F2> <esc>m`jdd``a
inoremap <C-F3> <esc>m`kdd``a
inoremap <C-F4> <esc>m`kdd``m`jdd``a

" fast macro

xnoremap @ :<C-u>call ExecuteMacroOverVisualRange()<CR>

function! ExecuteMacroOverVisualRange()
  echo "@".getcmdline()
  execute ":'<,'>normal @".nr2char(getchar())
endfunction

" Project tabs

function! s:select_project_and_run(sink)
    call fzf#run({
                \'source': g:fd_prog . ' . ~/proj --type d --max-depth 1',
                \'sink': a:sink,
                \'options': ['--preview', 'cat {}/README.md'],
                \})
endfunction

nnoremap <leader>op :call <SID>select_project_and_run(function("<SID>open_project_in_new_tab"))<CR>
nnoremap <leader>oo :call <SID>select_project_and_run(function("<SID>open_project"))<CR>


" Triger `autoread` when files changes on disk
autocmd FocusGained,BufEnter,CursorHold,CursorHoldI *
  \ if mode() !~ '\v(c|r.?|!|t)' && getcmdwintype() == '' | checktime | endif

" Notification after file change
autocmd FileChangedShellPost *
  \ echohl WarningMsg | echo "File changed on disk. Buffer reloaded." | echohl None

" terminal
autocmd TermOpen * startinsert

command! TerminalBufferDirectory :call TerminalBufferDirectory()
function! TerminalBufferDirectory()
  let l:dir = expand('%:h')
  vnew
  call termopen('cd '.l:dir.'; $SHELL -i')
endfunction

"""" util functions
runtime conf/qp_util.vim

""" compile/run/test functions

command! StartNear :call StartNear()
command! StopNear :call StopNear()

function! StartNear()
    execute "belowright :vnew"
    let g:near_term = termopen($SHELL)
    execute "normal! \<C-W>t"
    stopinsert
endfunction

function! StopNear()
    call chanclose(g:near_term)
endfunction

function! RunNear(prog)
    call chansend(g:near_term, "\f" . a:prog . "\n")
endfunction

nnoremap <expr> <leader>c RunNear(b:compile_prog)
nnoremap <expr> <leader>t RunNear(b:test_prog)
